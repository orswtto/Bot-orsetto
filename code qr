 Demo del generatore di codici QR (Python)
# 
# Eseguire questo programma da riga di comando senza argomenti. Il programma calcola una serie di dimostrazioni
# Codici QR e li stampa sulla console. Inoltre, il codice SVG per un codice QR viene stampato come esempio.
# 
# Copyright (c) Progetto Nayuki. (Licenza MIT)
# https://www.nayuki.io/page/qr-code-generator-library
# 
# L'autorizzazione è concessa, gratuitamente, a chiunque ottenga una copia di
# questo software e i file di documentazione associati (il "Software"), per trattare
# il Software senza restrizioni, inclusi, senza limitazione, i diritti di
# utilizzare, copiare, modificare, unire, pubblicare, distribuire, concedere in sublicenza e/o vendere copie di
# il Software, e per consentire alle persone a cui il Software è fornito di farlo,
# soggetto alle seguenti condizioni:
# - L'avviso di copyright di cui sopra e questo avviso di autorizzazione devono essere inclusi in
# tutte le copie o parti sostanziali del Software.
# - Il Software viene fornito "così com'è", senza garanzie di alcun tipo, espresse o
# implicito, incluse, a titolo esemplificativo ma non esaustivo, le garanzie di commerciabilità,
# idoneità per uno scopo particolare e non violazione. In nessun caso il
# gli autori o i detentori del copyright sono responsabili per qualsiasi reclamo, danno o altro
# responsabilità, sia in un'azione contrattuale, illecito civile o altro, derivante da,
# al di fuori o in connessione con il Software o l'uso o altri rapporti nel
#   Software.
# 

dalla digitazione di import List
da qrcodegen importa QrCode, QrSegment


def main() -> Nessuno:
	"""Il programma applicativo principale."""
	do_basic_demo()
	do_variety_demo()
	do_segment_demo()
	do_mask_demo()



# ---- Suite demo ----

def do_basic_demo() -> Nessuno:
	"""Crea un singolo codice QR, quindi lo stampa sulla console."""
	text = "Hello, world!" # Testo Unicode fornito dall'utente
	errcorlvl = QrCode. Ecc. LOW # Livello di correzione degli errori
	
	# Crea e stampa il simbolo del codice QR
	qr = QrCode. encode_text(testo, errcorlvl)
	print_qr(qr)
	stampa(to_svg_str(qr, 4))


def do_variety_demo() -> Nessuno:
	"""Crea una varietà di codici QR che esercitano diverse caratteristiche della libreria e stampa ciascuno sulla console."""
	
	# Codifica in modalità numerica (3,33 bit per cifra)
	qr = QrCode. encode_text("314159265358979323846264338327950288419716939937510", QrCode. Ecc. MEDIO)
	print_qr(qr)
	
	# Codifica in modalità alfanumerica (5,5 bit per carattere)
	qr = QrCode. encode_text("DOLLAR-AMOUNT:$39.87 PERCENTAGE:100.00% OPERATIONS:+-*/", QrCode. Ecc. ALTO)
	print_qr(qr)
	
	# Testo Unicode come UTF-8
	qr = QrCode. encode_text("\u3053\u3093\u306B\u3061\u0077\u0061\u3001\u4E16\u754C\uFF01\u0020\u03B1\u03B2\u03B3\u03B4", QrCode. Ecc. QUARTILE)
	print_qr(qr)
	
	# Codice QR moderatamente grande che utilizza testo più lungo (da Alice nel paese delle meraviglie di Lewis Carroll)
	qr = QrCode. encode_text(
		"Alice stava cominciando a stancarsi molto di sedersi accanto a sua sorella sulla riva, "
		"e di non avere nulla da fare: una o due volte aveva sbirciato nel libro che sua sorella stava leggendo, "
		"ma non aveva immagini o conversazioni, 'e a cosa serve un libro', pensò Alice"
		"'senza immagini o conversazioni?' Quindi stava considerando nella sua mente (come meglio poteva, "
		"per la giornata calda l'ha fatta sentire molto assonnata e stupida), sia il piacere di fare un "
		"daisy-chain varrebbe la pena di alzarsi e raccogliere le margherite, quando improvvisamente"
		"un coniglio bianco con gli occhi rosa correva vicino a lei.", QrCode. Ecc. ALTO)
	print_qr(qr)


def do_segment_demo() -> Nessuno:
	"""Crea codici QR con segmenti specificati manualmente per una migliore compattezza."""
	
	# Illustrazione "argento"
	silver0 = "LA RADICE QUADRATA DI 2 È 1."
	silver1 = "41421356237309504880168872420969807856967187537694807317667973799"
	qr = QrCode. encode_text(silver0 + silver1, QrCode. Ecc. BASSO)
	print_qr(qr)
	
	segs = [
		QrSegment. make_alphanumeric(argento0),
		QrSegment. make_numeric(argento1)]
	qr = QrCode. encode_segments(segs, QrCode. Ecc. BASSO)
	print_qr(qr)
	
	# Illustration "golden"
	golden0 = "Golden ratio \u03C6 = 1."
	golden1 = "6180339887498948482045868343656381177203091798057628621354486227052604628189024497072072041893911374"
	golden2 = "......"
	qr = QrCode.encode_text(golden0 + golden1 + golden2, QrCode.Ecc.LOW)
	print_qr(qr)
	
	segs = [
		QrSegment.make_bytes(golden0.encode("UTF-8")),
		QrSegment.make_numeric(golden1),
		QrSegment.make_alphanumeric(golden2)]
	qr = QrCode.encode_segments(segs, QrCode.Ecc.LOW)
	print_qr(qr)
	
	# Illustration "Madoka": kanji, kana, Cyrillic, full-width Latin, Greek characters
	madoka = "\u300C\u9B54\u6CD5\u5C11\u5973\u307E\u3069\u304B\u2606\u30DE\u30AE\u30AB\u300D\u3063\u3066\u3001\u3000\u0418\u0410\u0418\u3000\uFF44\uFF45\uFF53\uFF55\u3000\u03BA\u03B1\uFF1F"
	qr = QrCode.encode_text(madoka, QrCode.Ecc.LOW)
	print_qr(qr)
	
	kanjicharbits = [  # Kanji mode encoding (13 bits per character)
		0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
		0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1,
		0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1,
		0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0,
		0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1,
		0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1,
		0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1,
		0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1,
		0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1,
		0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0,
		0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0,
		0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,
		0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
		0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,
		0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1,
		0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1,
		0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,
		0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
	]
	segs = [QrSegment(QrSegment.Mode.KANJI, len(kanjicharbits) // 13, kanjicharbits)]
	qr = QrCode.encode_segments(segs, QrCode.Ecc.LOW)
	print_qr(qr)


def do_mask_demo() -> None:
	"""Creates QR Codes with the same size and contents but different mask patterns."""
	
	# Project Nayuki URL
	segs = QrSegment.make_segments("https://www.nayuki.io/")
	print_qr(QrCode.encode_segments(segs, QrCode.Ecc.HIGH, mask=-1))  # Automatic mask
	print_qr(QrCode.encode_segments(segs, QrCode.Ecc.HIGH, mask=3))  # Force mask 3
	
	# Chinese text as UTF-8
	segs = QrSegment.make_segments(
		"\u7DAD\u57FA\u767E\u79D1\uFF08\u0057\u0069\u006B\u0069\u0070\u0065\u0064\u0069\u0061\uFF0C"
		"\u8046\u807D\u0069\u002F\u02CC\u0077\u026A\u006B\u1D7B\u02C8\u0070\u0069\u02D0\u0064\u0069"
		"\u002E\u0259\u002F\uFF09\u662F\u4E00\u500B\u81EA\u7531\u5167\u5BB9\u3001\u516C\u958B\u7DE8"
		"\u8F2F\u4E14\u591A\u8A9E\u8A00\u7684\u7DB2\u8DEF\u767E\u79D1\u5168\u66F8\u5354\u4F5C\u8A08"
		"\u756B")
	print_qr(QrCode.encode_segments(segs, QrCode.Ecc.MEDIUM, mask=0))  # Force mask 0
	print_qr(QrCode.encode_segments(segs, QrCode.Ecc.MEDIUM, mask=1))  # Force mask 1
	print_qr(QrCode.encode_segments(segs, QrCode.Ecc.MEDIUM, mask=5))  # Force mask 5
	print_qr(QrCode.encode_segments(segs, QrCode.Ecc.MEDIUM, mask=7))  # Force mask 7



# ---- Utilities ----

def to_svg_str(qr: QrCode, border: int) -> str:
	"""Returns a string of SVG code for an image depicting the given QR Code, with the given number
	of border modules. The string always uses Unix newlines (\n), regardless of the platform."""
	if border < 0:
		raise ValueError("Border must be non-negative")
	parts: List[str] = []
	for y in range(qr.get_size()):
		per x nell'intervallo(qr.   get_size()):
			se qr. get_module(x, y):
				parti. append("M{},{}h1v1h-1z". formato(x + bordo, y + bordo))
	return """<?xml version="1.0" encoding="UTF-8"?>
<! DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//IT" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 {0} {0}" stroke="none">
 <larghezza di risposta="100%" altezza="100%" fill="#FFFFFF"/>
	<path d="{1}" fill="#000000"/>
</svg>
""". formato(qr. get_size() + bordo * 2, " ". unire(parti))


def print_qr(qrcode: QrCode) -> Nessuno:
	"""Stampa l'oggetto QrCode specificato sulla console."""
	bordo = 4
	per y nell'intervallo(-bordo, qrcode.   get_size() + bordo):
		per x nell'intervallo(-bordo, qrcode.   get_size() + bordo):
			print("\u2588 "[1 se qrcode. get_module(x,y) else 0] * 2, fine="")
		stampare()
	stampare()


# Esegui il programma principale
if __name__ == "__main__":
	principale()
